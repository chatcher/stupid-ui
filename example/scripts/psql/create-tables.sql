DROP TABLE IF EXISTS PTA_TABLE CASCADE;
DROP TABLE IF EXISTS TASK_TYPES CASCADE;
DROP TABLE IF EXISTS TASK_STATUSES CASCADE;
DROP TABLE IF EXISTS TASK_IDS CASCADE;
-- DROP TABLE IF EXISTS TASKS_PTA CASCADE;
-- DROP VIEW IF EXISTS TASKS CASCADE;

CREATE TABLE PTA_TABLE (
	PTA_ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
	PTA_RANGE TSTZRANGE DEFAULT TSTZRANGE(NOW(), NULL, '(]'),
	RESPONSIBLE_USER TEXT
);


CREATE TABLE TASK_TYPES (TASK_TYPE text PRIMARY KEY);

CREATE TABLE TASK_STATUSES (
	TASK_STATUS TEXT PRIMARY KEY,
	DESCRIPTION TEXT
);
INSERT INTO TASK_STATUSES
(TASK_STATUS, DESCRIPTION) VALUES
('E', 'Error'),
('P', 'Pending'),
('I', 'In Progress'),
('C', 'Complete');

DROP SEQUENCE IF EXISTS TASK_ID_SEQ;
CREATE SEQUENCE TASK_ID_SEQ;
CREATE TABLE TASK_IDS (TASK_ID int PRIMARY KEY);


CREATE TABLE TASKS_PTA (
	TASK_ID INT NOT NULL,
	TASK_TYPE TEXT NOT NULL REFERENCES TASK_TYPES(TASK_TYPE),
	TASK_STATUS TEXT NOT NULL REFERENCES TASK_STATUSES(TASK_STATUS)
) INHERITS (PTA_TABLE);


CREATE VIEW TASKS AS
SELECT
	TASK_ID,
	TASK_TYPE,
	TASK_STATUS,
	RESPONSIBLE_USER
FROM TASKS_PTA
WHERE PTA_RANGE @> NOW()
ORDER BY TASK_ID, LOWER(PTA_RANGE);


CREATE OR REPLACE FUNCTION INSERT_TASKS_PTA()
RETURNS TRIGGER
AS $$ BEGIN
	NEW.TASK_ID = NEXTVAL('TASK_ID_SEQ');

	INSERT INTO TASK_IDS
	(TASK_ID) VALUES (NEW.TASK_ID);

	INSERT INTO TASKS_PTA (
		TASK_ID,
		TASK_TYPE,
		TASK_STATUS,
		PTA_RANGE,
		RESPONSIBLE_USER
	) VALUES (
		NEW.TASK_ID,
		NEW.TASK_TYPE,
		COALESCE(NEW.TASK_STATUS, 'P'),
		TSTZRANGE(NOW(), NULL, '(]'),
		NEW.RESPONSIBLE_USER
	);

	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER PTA_TASKS_INSERT
INSTEAD OF INSERT
ON TASKS
FOR EACH ROW
EXECUTE FUNCTION INSERT_TASKS_PTA();


CREATE OR REPLACE FUNCTION UPDATE_TASKS_PTA()
RETURNS TRIGGER
AS $$ BEGIN
	UPDATE TASKS_PTA
	SET PTA_RANGE = TSTZRANGE(
		LOWER(PTA_RANGE),
		NOW(),
		'(]'
	)
	WHERE TASK_ID = NEW.TASK_ID
	  AND UPPER(PTA_RANGE) IS NULL
	;

	INSERT INTO TASKS_PTA (
		TASK_ID,
		TASK_TYPE,
		TASK_STATUS,
		PTA_RANGE,
		RESPONSIBLE_USER
	) VALUES (
		OLD.TASK_ID,
		NEW.TASK_TYPE,
		NEW.TASK_STATUS,
		TSTZRANGE(NOW(), NULL, '(]'),
		NEW.RESPONSIBLE_USER
	);

	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER PTA_TASKS_UPDATE
INSTEAD OF UPDATE
ON TASKS
FOR EACH ROW
EXECUTE FUNCTION UPDATE_TASKS_PTA();
